generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banks {
  IdBank       Int            @id @default(autoincrement())
  Name         String         @db.VarChar(255)
  IconPath     String?        @db.VarChar(255)
  IdUser       Int?
  Color        String?        @db.VarChar(255)
  Position     Int?
  users        users?         @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "banks_ibfk_1")
  baseexpenses baseexpenses[]

  @@index([IdUser], map: "IdUser")
}

model baseexpenses {
  IdBaseExpense       Int                   @id @default(autoincrement())
  Description         String                @db.VarChar(255)
  Price               Float                 @db.Float
  EntryDate           DateTime              @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdBank              Int?
  IdExpenseCategory   Int?
  Active              Boolean               @default(true)
  IdUser              Int?
  banks               banks?                @relation(fields: [IdBank], references: [IdBank], onUpdate: NoAction, map: "baseexpenses_ibfk_2")
  expensecategories   expensecategories?    @relation(fields: [IdExpenseCategory], references: [IdExpenseCategory], onUpdate: NoAction, map: "baseexpenses_ibfk_3")
  users               users?                @relation(fields: [IdUser], references: [IdUser], onDelete: Cascade, onUpdate: NoAction, map: "baseexpenses_ibfk_4")
  defaultexpenses     defaultexpenses?
  expensedestinys     expensedestinys[]
  fixedexpenses       fixedexpenses[]
  installmentexpenses installmentexpenses[]
  nfeexpenses         nfeexpenses?

  @@index([IdBank], map: "IdBank")
  @@index([IdExpenseCategory], map: "IdExpenseCategory")
  @@index([IdUser], map: "baseexpenses_ibfk_4")
}

model cashinflows {
  IdCashInflow       Int                  @id @default(autoincrement())
  Description        String               @db.VarChar(255)
  Value              Float                @db.Float
  EfectiveDate       DateTime             @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdUser             Int?
  cashinflowdestinys cashinflowdestinys[]
  users              users?               @relation(fields: [IdUser], references: [IdUser], onDelete: Cascade, onUpdate: NoAction, map: "cashinflows_ibfk_2")

  @@index([IdUser], map: "cashinflows_ibfk_2")
}

model destinys {
  IdDestiny          Int                  @id @default(autoincrement())
  Name               String               @db.VarChar(255)
  Color              String?              @db.VarChar(255)
  SplitJointExpense  Boolean              @default(dbgenerated("b'0'")) @db.Bit(1)
  IdUser             Int?
  Position           Int?
  cashinflowdestinys cashinflowdestinys[]
  users              users?               @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "destinys_ibfk_1")
  expensedestinys    expensedestinys[]

  @@index([IdUser], map: "IdUser")
}

model expensecategories {
  IdExpenseCategory Int            @id @default(autoincrement())
  Description       String         @db.VarChar(255)
  IdUser            Int?
  Position          Int?
  baseexpenses      baseexpenses[]
  users             users?         @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "expensecategories_ibfk_1")

  @@index([IdUser], map: "IdUser")
}

model fixedexpenses {
  IdFixedExpense Int          @id @default(autoincrement())
  Price          Float?       @db.Float
  StartDate      DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  EndDate        DateTime?    @db.DateTime(0)
  IdBaseExpense  Int
  baseexpenses   baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "fixedexpenses_ibfk_1")

  @@index([IdBaseExpense], map: "IdBaseExpense")
}

model installmentexpenses {
  IdInstallmentExpense Int          @id @default(autoincrement())
  Price                Float?       @db.Float
  StartDate            DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  ExpectedDate         DateTime     @db.DateTime(0)
  CurrentInstallment   Int
  MaxInstallment       Int
  IdBaseExpense        Int
  baseexpenses         baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "installmentexpenses_ibfk_1")

  @@index([IdBaseExpense], map: "IdBaseExpense")
}

model sistemparams {
  IdSistemParam Int      @id @default(autoincrement())
  Key           String   @db.VarChar(255)
  Value         String   @db.VarChar(255)
  EfectiveDate  DateTime @default(dbgenerated("(curdate())")) @db.Date
  IdUser        Int?
  users         users?   @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "sistemparams_ibfk_1")

  @@index([IdUser], map: "IdUser")
}

model defaultexpenses {
  IdDefaultExpense Int          @id @default(autoincrement())
  ExpenseDate      DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdBaseExpense    Int          @unique(map: "IdBaseExpense")
  baseexpenses     baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "defaultexpenses_ibfk_1")
}

model users {
  IdUser            Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(255)
  Login             String?             @db.VarChar(255)
  Password          String?             @db.VarChar(255)
  UseAuth           Boolean?
  banks             banks[]
  baseexpenses      baseexpenses[]
  cashinflows       cashinflows[]
  destinys          destinys[]
  expensecategories expensecategories[]
  sistemparams      sistemparams[]
  usersauth         usersauth[]
}

model expensedestinys {
  IdExpenseDestiny Int          @id @default(autoincrement())
  IdBaseExpense    Int
  IdDestiny        Int
  baseexpenses     baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "expensedestinys_ibfk_1")
  destinys         destinys     @relation(fields: [IdDestiny], references: [IdDestiny], onDelete: Cascade, onUpdate: NoAction, map: "expensedestinys_ibfk_2")

  @@index([IdBaseExpense], map: "IdBaseExpense")
  @@index([IdDestiny], map: "IdDestiny")
}

model cashinflowdestinys {
  IdExpenseDestiny Int         @id @default(autoincrement())
  IdCashInflow     Int
  IdDestiny        Int
  cashinflows      cashinflows @relation(fields: [IdCashInflow], references: [IdCashInflow], onDelete: Cascade, onUpdate: NoAction, map: "cashinflowdestinys_ibfk_1")
  destinys         destinys    @relation(fields: [IdDestiny], references: [IdDestiny], onDelete: Cascade, onUpdate: NoAction, map: "cashinflowdestinys_ibfk_2")

  @@index([IdCashInflow], map: "IdCashInflow")
  @@index([IdDestiny], map: "IdDestiny")
}

model usersauth {
  IdUserAuth Int     @id @default(autoincrement())
  IdUser     Int
  Token      String  @db.Text
  PublicKey  Bytes   @db.Blob
  Counter    BigInt
  DeviceKey  String? @db.VarChar(255)
  users      users   @relation(fields: [IdUser], references: [IdUser], onDelete: Cascade, onUpdate: NoAction, map: "usersauth_ibfk_1")

  @@index([IdUser], map: "IdUser")
}

model nfeexpenses {
  IdNfeExpense  Int          @id @default(autoincrement())
  ExpenseDate   DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdBaseExpense Int          @unique(map: "IdBaseExpense")
  DanfeCode     String?      @db.VarChar(255)
  Company       String?      @db.VarChar(255)
  baseexpenses  baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "nfeexpenses_ibfk_1")
  nfeitems      nfeitems[]
}

model nfeitems {
  IdNfeItem    Int         @id @default(autoincrement())
  IdNfeExpense Int
  Description  String?     @db.VarChar(255)
  Quantity     Float?      @db.Float
  UN           String?     @db.VarChar(255)
  UnityValue   Float?      @db.Float
  TotalValue   Float?      @db.Float
  nfeexpenses  nfeexpenses @relation(fields: [IdNfeExpense], references: [IdNfeExpense], onDelete: Cascade, onUpdate: NoAction, map: "nfeitems_ibfk_1")

  @@index([IdNfeExpense], map: "IdNfeExpense")
}
