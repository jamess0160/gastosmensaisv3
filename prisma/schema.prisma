generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banks {
  IdBank       Int            @id @default(autoincrement())
  Name         String         @db.VarChar(255)
  IconPath     String?        @db.VarChar(255)
  IdUser       Int?
  Color        String?        @db.VarChar(255)
  users        users?         @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "banks_ibfk_1")
  baseexpenses baseexpenses[]

  @@index([IdUser], map: "IdUser")
}

model baseexpenses {
  IdBaseExpense       Int                   @id @default(autoincrement())
  Description         String                @db.VarChar(255)
  Price               Float                 @db.Float
  EntryDate           DateTime              @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdDestiny           Int?
  IdBank              Int?
  IdExpenseCategory   Int?
  Active              Boolean               @default(true)
  IdUser              Int?
  destinys            destinys?             @relation(fields: [IdDestiny], references: [IdDestiny], onUpdate: NoAction, map: "baseexpenses_ibfk_1")
  banks               banks?                @relation(fields: [IdBank], references: [IdBank], onUpdate: NoAction, map: "baseexpenses_ibfk_2")
  expensecategories   expensecategories?    @relation(fields: [IdExpenseCategory], references: [IdExpenseCategory], onUpdate: NoAction, map: "baseexpenses_ibfk_3")
  users               users?                @relation(fields: [IdUser], references: [IdUser], onDelete: Cascade, onUpdate: NoAction, map: "baseexpenses_ibfk_4")
  defaultexpenses     defaultexpenses?
  fixedexpenses       fixedexpenses[]
  installmentexpenses installmentexpenses[]

  @@index([IdBank], map: "IdBank")
  @@index([IdDestiny], map: "IdDestiny")
  @@index([IdExpenseCategory], map: "IdExpenseCategory")
  @@index([IdUser], map: "baseexpenses_ibfk_4")
}

model cashinflows {
  IdCashInflow Int       @id @default(autoincrement())
  Description  String    @db.VarChar(255)
  Value        Float     @db.Float
  EfectiveDate DateTime  @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdDestiny    Int?
  IdUser       Int?
  destinys     destinys? @relation(fields: [IdDestiny], references: [IdDestiny], onUpdate: NoAction, map: "cashinflows_ibfk_1")
  users        users?    @relation(fields: [IdUser], references: [IdUser], onDelete: Cascade, onUpdate: NoAction, map: "cashinflows_ibfk_2")

  @@index([IdDestiny], map: "IdDestiny")
  @@index([IdUser], map: "cashinflows_ibfk_2")
}

model destinys {
  IdDestiny         Int            @id @default(autoincrement())
  Name              String         @db.VarChar(255)
  Color             String?        @db.VarChar(255)
  SplitJointExpense Boolean        @default(dbgenerated("b'0'")) @db.Bit(1)
  IdUser            Int?
  baseexpenses      baseexpenses[]
  cashinflows       cashinflows[]
  users             users?         @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "destinys_ibfk_1")

  @@index([IdUser], map: "IdUser")
}

model expensecategories {
  IdExpenseCategory Int            @id @default(autoincrement())
  Description       String         @db.VarChar(255)
  IdUser            Int?
  baseexpenses      baseexpenses[]
  users             users?         @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "expensecategories_ibfk_1")

  @@index([IdUser], map: "IdUser")
}

model fixedexpenses {
  IdFixedExpense Int          @id @default(autoincrement())
  Price          Float?       @db.Float
  StartDate      DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  EndDate        DateTime?    @db.DateTime(0)
  IdBaseExpense  Int
  baseexpenses   baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "fixedexpenses_ibfk_1")

  @@index([IdBaseExpense], map: "IdBaseExpense")
}

model installmentexpenses {
  IdInstallmentExpense Int          @id @default(autoincrement())
  Price                Float?       @db.Float
  StartDate            DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  ExpectedDate         DateTime     @db.DateTime(0)
  CurrentInstallment   Int
  MaxInstallment       Int
  IdBaseExpense        Int
  baseexpenses         baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "installmentexpenses_ibfk_1")

  @@index([IdBaseExpense], map: "IdBaseExpense")
}

model sistemparams {
  IdSistemParam Int      @id @default(autoincrement())
  Key           String   @db.VarChar(255)
  Value         String   @db.VarChar(255)
  EfectiveDate  DateTime @default(dbgenerated("(curdate())")) @db.Date
  IdUser        Int?
  users         users?   @relation(fields: [IdUser], references: [IdUser], onDelete: NoAction, onUpdate: NoAction, map: "sistemparams_ibfk_1")

  @@index([IdUser], map: "IdUser")
}

model defaultexpenses {
  IdDefaultExpense Int          @id @default(autoincrement())
  ExpenseDate      DateTime     @default(dbgenerated("(curdate())")) @db.DateTime(0)
  IdBaseExpense    Int          @unique(map: "IdBaseExpense")
  baseexpenses     baseexpenses @relation(fields: [IdBaseExpense], references: [IdBaseExpense], onDelete: Cascade, onUpdate: NoAction, map: "defaultexpenses_ibfk_1")
}

model users {
  IdUser            Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(255)
  Login             String?             @db.VarChar(255)
  Password          String?             @db.VarChar(255)
  banks             banks[]
  baseexpenses      baseexpenses[]
  cashinflows       cashinflows[]
  destinys          destinys[]
  expensecategories expensecategories[]
  sistemparams      sistemparams[]
}
